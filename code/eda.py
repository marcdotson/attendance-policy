# -*- coding: utf-8 -*-
"""eda.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ITTI5s4L207yZ7eo7yRzoX4_fiszBPNZ
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import warnings
import ast
warnings.filterwarnings('ignore')
#import libraries

df= pd.read_csv('/content/exploratory_data.csv')
df.head()

df['schools_attended'].value_counts()
#See different combinations of 703, 706

#This section helps split the school codes better

# Ensure 'schools_attended' is stored as a list, handling NaN values safely
def safe_convert(value):
    if isinstance(value, str):  # If stored as a string, convert it to a list
        try:
            return ast.literal_eval(value)  # Safer than eval()
        except (SyntaxError, ValueError):
            return []  # Return an empty list if conversion fails
    elif isinstance(value, list):
        return value  # Already a list, return as is
    else:
        return []  # Return an empty list for NaN or other unexpected types

df["schools_attended"] = df["schools_attended"].apply(safe_convert)

# Filter the DataFrame where 703 or 706 is in the list of schools attended
filtered_df = df[df["schools_attended"].apply(lambda x: any(school in x for school in [703.0, 706.0]))]

#get more details about the dataset
filtered_df.info()
filtered_df.describe()

#Compare attendance against factors such as race, gender, and immigrant status
group1_stats = filtered_df.groupby('amerindian_alaskan')['percent_days_attended'].mean()
group2_stats = filtered_df.groupby('asian')['percent_days_attended'].mean()
group3_stats = filtered_df.groupby('black_african_amer')['percent_days_attended'].mean()
group4_stats = filtered_df.groupby('hawaiian_pacific_isl')['percent_days_attended'].mean()
group5_stats = filtered_df.groupby('white')['percent_days_attended'].mean()
group6_stats = filtered_df.groupby('immigrant')['percent_days_attended'].mean()
group7_stats = filtered_df.groupby('gender')['percent_days_attended'].mean()


# Print the results
print("Group 1 Statistics:\n", group1_stats)
print("\nGroup 2 Statistics:\n", group2_stats)
print("\nGroup 3 Statistics:\n", group3_stats)
print("Group 4 Statistics:\n", group4_stats)
print("\nGroup 5 Statistics:\n", group5_stats)
print("\nGroup 6 Statistics:\n", group6_stats)
print("Group 7 Statistics:\n", group7_stats)
# ... print other group statistics

#Chart of above analysis
ethnicity_attendance = {
    "Amerindian/Alaskan": group1_stats.get("Y", None),
    "Asian": group2_stats.get("Y", None),
    "Black/African American": group3_stats.get("Y", None),
    "Hawaiian/Pacific Islander": group4_stats.get("Y", None),
    "White": group5_stats.get("Y", None),
}

# Convert to a DataFrame for easier manipulation
df_ethnicity = pd.DataFrame(list(ethnicity_attendance.items()), columns=["Ethnicity", "Percent Days Attended"])

# Create the bar plot
plt.figure(figsize=(8,5))
sns.barplot(data=df_ethnicity, x="Ethnicity", y="Percent Days Attended", palette="viridis")

# Add labels and title
plt.xlabel("Ethnic Groups")
plt.ylabel("Percent Days Attended")
plt.title("Attendance Rate Comparison by Ethnicity (Y)")
plt.ylim(93, 97)  # Adjust y-axis for clarity

# Show exact values on top of bars
for i, row in df_ethnicity.iterrows():
    plt.text(i, row["Percent Days Attended"] + 0.1, f"{row['Percent Days Attended']:.2f}%", ha='center', fontsize=12)

# Show the plot
plt.xticks(rotation=15)
plt.show()

#Chart comparing school attendance
import matplotlib.pyplot as plt
import seaborn as sns

# Categorize students into three groups
only_706 = df[df["schools_attended"].apply(lambda x: 706.0 in x and 703.0 not in x)]
only_703 = df[df["schools_attended"].apply(lambda x: 703.0 in x and 706.0 not in x)]
both_703_706 = df[df["schools_attended"].apply(lambda x: 703.0 in x and 706.0 in x)]

# Calculate average percent days attended for each group
attendance_rates = {
    "Only 706": only_706["percent_days_attended"].mean(),
    "Only 703": only_703["percent_days_attended"].mean(),
    "Both 703 & 706": both_703_706["percent_days_attended"].mean()
}

# Convert to DataFrame for plotting
df_attendance = pd.DataFrame(list(attendance_rates.items()), columns=["Group", "Percent Days Attended"])

# Create the bar plot
plt.figure(figsize=(8, 5))
sns.barplot(data=df_attendance, x="Group", y="Percent Days Attended", palette="viridis")

# Add labels and title
plt.xlabel("School Attendance Group")
plt.ylabel("Percent Days Attended")
plt.title("Attendance Rate Comparison for 703 and 706")

# Show exact values on top of bars
for i, row in df_attendance.iterrows():
    plt.text(i, row["Percent Days Attended"] + 0.1, f"{row['Percent Days Attended']:.2f}%", ha='center', fontsize=12)

# Show the plot
plt.ylim(90, 100)  # Adjusting y-axis for clarity
plt.show()

#Additional Analysis
import seaborn as sns
import matplotlib.pyplot as plt

# Assuming 'df' is your DataFrame

plt.figure(figsize=(10, 6))

# Scatter plot for 'overall_gpa' vs. 'percent_days_attended'
plt.subplot(1, 2, 1)
sns.scatterplot(x='overall_gpa', y='percent_days_attended', data=filtered_df)
plt.title('Percent Days Attended vs. Overall GPA')
plt.xlabel('Overall GPA')
plt.ylabel('Percent Days Attended')
plt.ylim(0, 100)  # Set y-axis limits

# Scatter plot for 'schools_attended' vs. 'percent_days_attended'
plt.subplot(1, 2, 2)
sns.scatterplot(x='ac_count', y='percent_days_attended', data=filtered_df)
plt.title('Percent Days Attended vs. ac count')
plt.xlabel('ac count')
plt.ylabel('Percent Days Attended')
plt.ylim(0, 100)  # Set y-axis limits

plt.tight_layout()
plt.show()